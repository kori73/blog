{
  
    
        "post0": {
            "title": "Probabilistic Computation 1: Inverse transform sampling",
            "content": "Inverse transform sampling is a simple method for sampling from a probability distribution. It is an exact sampling method which means that the samples are drawn independently. This method requires that we can take independent samples from a uniform $U(0, 1)$ distribution. Modern computers are equipped with pseudo random number generators and we will use numpy for sampling from $U(0, 1)$. . Algorithm . Suupose that we want to sample from a probability distribution $p(v)$. Corresponding cumulative distribution functions is defined as: . $F(v_*) = int_{- infty}^{v_*} p(v) dv$ . Then the steps for inverse transform sampling are as follows. . Take a random sample from $U sim U(0, 1)$ | Then let $v = F^{-1}(U)$ | . The values $v$ obtained will follow the distribution $p$. If we have $F^{-1}$ in closed form, inverse sampling method is very useful. However, this not always the case. For example, for normal distribution we don&#39;t have a closed form expression of $F^{-1}$. . The intuition . Assume that we have a triangular probability density function. The pdf and cdf are as follows. Also assume that $Pr(v &gt; 1) = 0$ and $Pr(v &lt; 0)$ = 0 . In the cumulative distribution function plot, each green line shows the change in $F^{-1}(u)$ when $u$ takes a constant small step (0.03). Two consecutive green lines specify a constant fraction of $U(0, 1)$ allocated to the numbers on the $x$ axis. As $u to 1$, the green lines become more densely spaced. Thus, a same fraction of the $U(0, 1)$ is allocated to relatively smaller intervals as $u to 1$. . Observing the red lines, wee see that $0 leq u leq 0.25$ is allocated to the values $v leq 0.5$ and the values $u &gt; 0.25$ are allocated to the values $v &gt; 0.5$. The result is that $Pr(v leq 0.5) = 0.25$ which can be confirmed on the probability density function plot. . If you are interested in the proof, check out Karl Sigman&#39;s lecture notes. . Exponential distribution example . The example is often given with an exponential distribution since calculating $F^{-1}$ is straightforward. . $p(v) = lambda e^{- lambda v}$ . $F(v) = 1 - e^{ lambda v}$ . $F^{-1}(p) = frac{-log(1 - p)}{ lambda}$ . After obtaining $F^{-1}(p)$, we can start to simulate. Let&#39;s define the inverse CDF as: . import numpy as np def inv_cdf(p, lamb): &quot;&quot;&quot;Inverse CDF of exponential distribution&quot;&quot;&quot; return -np.log(1 - p) / lamb . Let&#39;s take 5000 samples from $U(0, 1)$ . np.random.seed(42) # set the seed for reproducibility u = np.random.uniform(0, 1, 5000) . Now we can obtain samples from $p$ using the inverse CDF. Assume that $ lambda=5$. . v = inv_cdf(u, 5) . Comparing the samples with np.random.exponential samples . x = np.random.exponential(1 / 5, 5000) # Using scale = 1 / 5 since scale = 1 / lambda bins = np.linspace(0.0, 1.7, 20) plt.figure(figsize=(8, 6)) plt.hist(x, bins, alpha=0.4, label=&quot;numpy samples&quot;, color=&quot;green&quot;); plt.hist(v, bins, alpha=0.4, label=&quot;our samples&quot;, color=&quot;blue&quot;); plt.title(&quot;Samples obtained from numpy vs samples obtained with inversed transform sampling&quot;); . Normal distribution example . In the normal distribution case, we don&#39;t have a closed form expression of the inverse CDF. However, we can evaluate it on a grid of points and interpolate for any values in between. Let&#39;s evaluate the normal pdf at a grid of points first. In this case, we will deal with a univariate normal distribution. Note that this approach becomes computionally infeasible as the number of dimensions increases. . def pdf_normal(x, mu, sigma): &quot;&quot;&quot;probability density function for normal distribution&quot;&quot;&quot; return np.exp(-(x - mu)**2 / (2 * sigma**2)) / sigma / np.sqrt(2 * np.pi) pdf_normal(0, 0, 1) . 0.3989422804014327 . We can now evaluate the integral to find the CDF. Let&#39;s use cumtrapz for cumulative integration. After calculating the CDF at a grid of points, inverse of the CDF is obtained by swapping the x and y axes. . from scipy.integrate import cumtrapz cdf = cumtrapz(discrete_pdf, grid) . To use the samples taken from $U(0, 1)$ in the discrete CDF, interpolation is required. . from scipy.interpolate import interp1d inverse_cdf_normal = interp1d(cdf, grid[1:]) inverse_cdf_normal(0.9) . array(1.28155335) . Let the sampling begin! As usual, we should check the histogram and expect that it matches numpy samples. . plt.figure(figsize=(8, 4)) normal_samples = inverse_cdf_normal(u) numpy_samples = np.random.normal(0, 1, 5000) plt.hist(normal_samples, label=&quot;inverse transform samples&quot;); plt.hist(numpy_samples, label=&quot;np.random.normal samples&quot;); plt.legend(); . Takeaways . Exact sampling means that the samples are drawn independently. | If we have the closed form expression of the inverse CDF, inverse transform sampling is very efficient since there is no accept/reject mechanism (all samples are accepted). Otherwise it becomes very inefficient as the number of dimensions increases. | .",
            "url": "https://kori73.github.io/blog/2020/05/24/inverse-transform.html",
            "relUrl": "/2020/05/24/inverse-transform.html",
            "date": " • May 24, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://kori73.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://kori73.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://kori73.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}