{
  
    
        "post0": {
            "title": "Bayesian Inference",
            "content": "In this post, we will try to understand the basics of bayesian inference. After implementing a simple model with PyMC3, we will try to obtain the same results by ourselves. The example we will use is from Gelman&#39;s book and we will investigate the relationship between the drug dose and the number of rat deaths. . I have seen this example on the Duke teaching material for the Computational Statistics in Python course. This is a great learning source and a wide range of topics are covered (from numerical integration to JIT compiling and MCMC sampling). . import pandas as pd pd.set_option(&#39;display.max_rows&#39;, 500) import numpy as np from matplotlib import pyplot as plt from scipy.special import gammaln from scipy.stats import norm, binom, uniform import pymc3 as pm import arviz as az . # Observed data n = 5 * np.ones(4) x = np.array([-0.896, -0.296, -0.053, 0.727]) y = np.array([0, 1, 3, 5]) pd.DataFrame(np.stack([x, y, n], axis=1), columns=[&quot;drug_dose log g/ml&quot;, &quot;number of rat deaths&quot;, &quot;total number of rats&quot;]) . drug_dose log g/ml number of rat deaths total number of rats . 0 -0.896 | 0.0 | 5.0 | . 1 -0.296 | 1.0 | 5.0 | . 2 -0.053 | 3.0 | 5.0 | . 3 0.727 | 5.0 | 5.0 | . Increasing drug dose seems to result in more rat deaths. The proposed model is the following . $ y sim Bin(n, theta) $ . $ logit( theta) = alpha x + beta $ . $ alpha sim mathcal{N(0, 5)}$ . $ beta sim mathcal{N(0, 10)}$ . $logit$ is often used to map the probability values $[0, 1]$ to $(- infty, infty)$. Take a look at the the plot of the $logit$ function to get a sense of the mapping. . def logit(x): &quot;&quot;&quot;logit function&quot;&quot;&quot; return np.log(x / (1 - x)) def invlogit(x): &quot;&quot;&quot;inverse logit function&quot;&quot;&quot; return np.exp(x) / (1 + np.exp(x)) font = 14 plt.figure(figsize=(8, 6)) x_vals = np.arange(start=0, stop=1, step=0.001) y_vals = logit(x_vals) plt.plot(x_vals, y_vals, linewidth=2) plt.xlabel(&quot;x&quot;, fontsize=font) plt.ylabel(&quot;logit(x)&quot;, fontsize=font) plt.title(&quot;$logit$ function&quot;, fontsize=font); . Let&#39;s build this model with PyMC3. . with pm.Model() as model: alpha = pm.Normal(&quot;alpha&quot;, mu=0., sigma=10) beta = pm.Normal(&quot;beta&quot;, mu=0., sigma=10) theta = invlogit(alpha * x + beta) obs = pm.Binomial(&quot;obs&quot;, n=n, p=theta, observed=y) . Getting the logp of the model . print(type(model)) . &lt;class &#39;pymc3.model.Model&#39;&gt; . &#39;Model&#39; class has a logp method that returns the log posterior density. It is simply the logarithm of the $likelihood * prior$ calcualated over all the observations (it is posterior after all). . $logp = log left( displaystyle prod_{i}p(y_i | alpha, beta)p( alpha)p( beta) right) = log(p( alpha)) + log(p( beta)) + displaystyle sum_{i}log left(p left(y_i | alpha, beta right) right)$ . model.logp({&quot;alpha&quot;: 5, &quot;beta&quot;: 0}) . array(-8.99003943) . I will go ahead and calculate the model logp for parameters $ alpha=5$ and $ beta=0$. Priors are easy. They are just log probabilies of evaluated at given points. . def logp_alpha(alpha): &quot;&quot;&quot;log(p(alpha)). We have defined this as Normal(mu=5, sigma=2).&quot;&quot;&quot; return np.log(norm(0, 10).pdf(alpha)) def logp_beta(beta): &quot;&quot;&quot;log(p(beta)). We have defined this as Normal(mu=0, sigma=1).&quot;&quot;&quot; return np.log(norm(0, 10).pdf(beta)) print(logp_alpha(5), logp_beta(0)) . -3.346523626198718 -3.2215236261987186 . Now I need the log-likehood. Here is a quick reminder for binomial distribution pmf. . $f(k, n, theta) = {n choose k} theta^{k} (1 - theta)^{n - k}$ . Consider the likelihood for a single data point: . $ theta = logit^{-1}( alpha x_i + beta)$ . $p(y_i | alpha, beta, n, x_i) = {n choose y_i} theta^{y_i} (1 - theta)^{n - y_i}$ where $n=5$. Then, . Now, for all data points; . $p(y | alpha, beta, n, x) = { displaystyle prod_{i}}p(y_i | alpha, beta, n, x_i) = { displaystyle prod_{i}}{n choose y_i} theta^{y_i} (1 - theta)^{n - y_i}$ . Then log likelihood becomes; . $log left(p left(y | alpha, beta, n, x right) right) = { displaystyle sum_{i}}log left(p left(y_i | alpha, beta, n, x_i right) right) = { displaystyle sum_{i}} log({n choose y_i}) + { displaystyle sum_{i}} y_i log( theta) + { displaystyle sum_{i}} (n - y_i) log(1 - theta)$ . from scipy.special import comb def log_likelihood(alpha, beta, n=5): p = invlogit(alpha * x + beta) return (np.log(comb(n, y)) + y * np.log(p) + (n - y) * np.log(1 - p)).sum() log_likelihood(5, 0) . -2.4219921803901476 . Model log probability is just the sum of these terms. . def logp(parameters): &quot;&quot;&quot;Model log posterior density&quot;&quot;&quot; alpha = parameters[0] beta = parameters[1] return log_likelihood(alpha, beta) + logp_alpha(alpha) + logp_beta(beta) print(f&quot;Yay we got the logp: {logp([5, 0])}&quot;) . Yay we got the logp: -8.990039432787585 . All the inference methods in PyMC3 uses this logp information. The easiest thing we can do is to find the MAP (Maximum a Posteriori) estimate. MAP estimate gives the mode of the log posterior density. Thus, we get a point estimate not a posterior distribution. The only difference from MLE (Maximum Likelihood Estimate) is that with MAP estimate, we are more flexible and more explicit with our prior belief. MLE is just a special case of the MAP estimate where all the priors are uniform distributions (implicitly). . with pm.Model() as model: alpha = pm.Normal(&quot;alpha&quot;, mu=0., sigma=10) beta = pm.Normal(&quot;beta&quot;, mu=0., sigma=10) theta = invlogit(alpha * x + beta) obs = pm.Binomial(&quot;obs&quot;, n=n, p=theta, observed=y) map_estimate = pm.find_MAP() # pm.find_MAP gives the MAP estimate print(map_estimate) . logp = -8.6739, ||grad|| = 9.461e-05: 100%|██████████| 13/13 [00:00&lt;00:00, 1621.69it/s] . {&#39;alpha&#39;: array(6.50788034), &#39;beta&#39;: array(0.65896654)} . Using the logp function we just defined and scipy.optimize we can get the MAP estimate. . from scipy.optimize import fmin my_map_estimate = fmin(lambda x: -logp(x), x0=[5, 0]) # Instead of maximizing logp we are minimizing -logp print(f&quot;Yay, we got the MAP estimate {my_map_estimate}&quot;) . Optimization terminated successfully. Current function value: 8.673901 Iterations: 154 Function evaluations: 300 Yay, we got the MAP estimate [6.50790747 0.65896469] . Prior predictive sampling . Prior predictive sampling is usually the first thing to do after building a model with PyMC3. It can show whether your assumptions are crap without using the data. What we need to do is to look at the samples and ask &#39;Does this make sense?&#39;. Check this video by Thomas Wiecki where he identifies that his COVID-19 growth model is terrible with a prior predictive check. He finds out that the model can result in negative or decreasing cumulative number of cases. . Getting the prior predictive samples is trivial. Just sample from the priors and pluck them all the way down. In this case, looking at the parameter $p$ might give us better insight than actually sampling from a binomial distribution with that $p$ value. Let&#39;s look at how the $p$ changes with different $ alpha$ and $ beta$ where the drug dose is in the range $[-1, 1]$. . def sample_prior_predictive(n_samples): &quot;&quot;&quot;Returns the prior predictive samples of alpha, beta and p&quot;&quot;&quot; prior_samples = {} alpha = norm(0, 10).rvs(n_samples) beta = norm(0, 10).rvs(n_samples) p = invlogit(alpha * x.reshape(-1, 1) + beta).T prior_samples[&quot;alpha&quot;] = alpha prior_samples[&quot;beta&quot;] = beta prior_samples[&quot;p&quot;] = p return prior_samples . def plot_prior_predictive(prior_checks): &quot;&quot;&quot; helper plot function for prior predictive checks &quot;&quot;&quot; _, ax = plt.subplots(figsize=(12, 8)) for a, b in zip(prior_checks[&quot;alpha&quot;], prior_checks[&quot;beta&quot;]): p_bottom = invlogit(a * -1 + b) p_top = invlogit(a * 1 + b) ax.plot([-1, 1], [p_bottom, p_top], c=&quot;k&quot;, alpha=0.2) ax.set_xlabel(&quot;Drug dose (X)&quot;) ax.set_ylabel(&quot;Probability of rat death ($p$)&quot;) ax.set_title(&quot;Prior predictive checks&quot;); . prior_checks_manual = sample_prior_predictive(250) plot_prior_predictive(prior_checks_manual) . Of course we won&#39;t be writing custom functions for prior predictive sampling. We can just use the sample_prior_predictive method provided by the pymc3. Let&#39;s do that and verify our results. . with model: prior_checks = pm.sample_prior_predictive(samples=250, random_seed=0) . plot_prior_predictive(prior_checks) . Nothing surprising here, plots are similar. Now it&#39;s time to interpret them. . For some $ alpha$ and $ beta$, the probability of death $p$ is always 1 and for some cases, it decreases with increasing drug dose. We can shrink the priors to make them reflect what we intended with our model. We can use our prior belief and say: The risk of death should increase with increasing drug dose. For that purpose, we can use a HalfNormal prior for $ alpha$ to force it to be non-negative. . with pm.Model() as model: alpha = pm.HalfNormal(&quot;alpha&quot;, sigma=3) beta = pm.Normal(&quot;beta&quot;, mu=0., sigma=3) p = pm.Deterministic(&quot;p&quot;, invlogit(alpha * x + beta)) obs = pm.Binomial(&quot;obs&quot;, n=n, p=p, observed=y) prior_checks = pm.sample_prior_predictive(samples=100, random_seed=42) . plot_prior_predictive(prior_checks) . This seems better. We got rid of those decreasing lines. But remember, we have made an assumption that the increasing drug dose increases the risk of death. . Getting the full posterior with MCMC . with pm.Model() as model: alpha = pm.Normal(&quot;alpha&quot;, mu=0., sigma=10) beta = pm.Normal(&quot;beta&quot;, mu=0., sigma=10) theta = invlogit(alpha * x + beta) obs = pm.Binomial(&quot;obs&quot;, n=n, p=theta, observed=y) map_estimate = pm.find_MAP() # pm.find_MAP gives the MAP estimate trace = pm.sample(15000, random_seed=42, tune=2000) . logp = -8.6739, ||grad|| = 9.461e-05: 100%|██████████| 13/13 [00:00&lt;00:00, 2649.72it/s] Auto-assigning NUTS sampler... Initializing NUTS using jitter+adapt_diag... Multiprocess sampling (4 chains in 4 jobs) NUTS: [beta, alpha] Sampling 4 chains, 0 divergences: 100%|██████████| 68000/68000 [00:13&lt;00:00, 5023.38draws/s] . initial = np.array([0, 0]) # Starting point is alpha = 0, beta = 0 . def sample(point, n_samples, burnout=20000): samples = {&quot;alpha&quot;: np.array([]), &quot;beta&quot;: np.array([])} n_accepted = 0 i = 0 while n_accepted &lt; n_samples: logp_old = logp(point) proposal = point + norm(0, 1).rvs(2) logp_new = logp(proposal) log_acceptance = min(0, logp_new - logp_old) acceptance = np.exp(log_acceptance) random_uniform = uniform(0, 1).rvs() if random_uniform &lt;= acceptance: point = proposal i += 1 if i &gt; burnout: n_accepted += 1 samples[&quot;alpha&quot;] = np.append(samples[&quot;alpha&quot;], proposal[0]) samples[&quot;beta&quot;] = np.append(samples[&quot;beta&quot;], proposal[1]) return samples . trace_manual = sample(initial, 60000) . plt.hist(trace_manual[&quot;alpha&quot;], label=&quot;manual&quot;, alpha=0.5) plt.hist(trace[&quot;alpha&quot;], label=&quot;pymc3&quot;, alpha=0.5) plt.legend() plt.show() . plt.hist(trace_manual[&quot;beta&quot;], label=&quot;manual&quot;, alpha=0.5) plt.hist(trace[&quot;beta&quot;], label=&quot;pymc3&quot;, alpha=0.5) plt.legend() plt.show() . trace[&quot;alpha&quot;].shape . (60000,) . trace_manual[&quot;alpha&quot;].shape . (60000,) . print(trace[&quot;beta&quot;][-10000:].mean(), trace_manual[&quot;beta&quot;][-10000:].mean()) . 0.9565447480456002 1.002960881477844 . print(trace[&quot;alpha&quot;][-10000:].mean(), trace_manual[&quot;alpha&quot;][-10000:].mean()) . 8.890774661254817 9.172048860699817 . trace[&quot;beta&quot;].mean() . 0.9737094418151728 . logp(initial) . -16.393967858168196 . trace[&quot;alpha&quot;].mean() . 4.629455740888774 . pm.traceplot(trace); . /home/koray/anaconda3/lib/python3.8/site-packages/arviz/data/io_pymc3.py:87: FutureWarning: Using `from_pymc3` without the model will be deprecated in a future release. Not using the model will return less accurate and less useful results. Make sure you use the model argument or call from_pymc3 within a model context. warnings.warn( . with model: ppc = pm.sample_posterior_predictive( trace, var_names=[&quot;alpha&quot;, &quot;beta&quot;, &quot;p&quot;, &quot;obs&quot;], random_seed=42 ) . 100%|██████████| 8000/8000 [00:05&lt;00:00, 1515.61it/s] . logit(ppc[&quot;obs&quot;]) . array([[-inf, inf, nan, nan], [-inf, inf, nan, nan], [-inf, nan, -inf, nan], ..., [-inf, -inf, nan, nan], [-inf, -inf, nan, nan], [ inf, nan, nan, nan]]) . xs = np.linspace(-1, 1, 100) alphas = ppc[&quot;alpha&quot;] betas = ppc[&quot;beta&quot;] probs = invlogit(alphas.reshape(-1, 1) * xs.reshape(1, -1) + betas.reshape(-1, 1)) . fig, ax = plt.subplots(figsize=(14, 8)) ax.plot(xs, probs.T, color=&quot;0.5&quot;, alpha=0.02); ax.scatter(x, y/5, color=&quot;r&quot;) . &lt;matplotlib.collections.PathCollection at 0x7fc7f8f01a00&gt; .",
            "url": "http://ichy.io/2021/02/05/brand-new.html",
            "relUrl": "/2021/02/05/brand-new.html",
            "date": " • Feb 5, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Probabilistic Computation 2: Rejection Sampling",
            "content": "Rejection sampling is an exact sampling method that allows us to generate samples from a density $p(x)$ or an unnormalized density. Rejection sampling requires that we have another density $q(y)$ which we can sample from an. For rejection sampling to work, there must be a constant $M$ value ($M &gt; 0$) that will satify the condition $Mq(x) geq f(x)$ for all $x$. . The algorithm . Generate a sample $y$ from $q(y)$. | Generate a sample u from $U(0, 1)$. | If $u leq frac {f(x)} {Mg(x)}$ accept the sample, otherwise reject it. | But what is the point of this $M$? Well, with this $M$ value, we can use $q(y)$ as a blanket over the target density $p(y)$. Let&#39;s demonstrate it with an example. . Example: Sampling from normal distribution . Consider $q(y)$ as a uniform distribution $U(0, 10)$ and the target density as a univariate normal distribution $ mathcal{N(5, 1)}$. . In the plot above, there is an M value ($M approx 4$)such that $Mq(y) geq p(y)$ for all $y$. Therefore, we can employ rejection sampling for this case. Now let&#39;s imagine a case where there is no such M. . Assume that the first sample from the $U(0, 10)$ turns out to be $3.825$. . $q(3.825) = 0.1$ just as any other value in $[0, 10]$ and we can obtain $p(3.825)$ since we know its pdf. . from scipy.stats import norm normal_rv = norm(5, 1) normal_rv.pdf(3.825) . 0.20003737933848778 . Obtaining $ frac {f(0.3825)} {Mg(0.3825)} approx 0.5$, . import numpy as np import matplotlib.pyplot as plt from scipy.stats import norm x = np.linspace(0, 10, 1000) plt.figure(figsize=(10, 6)) plt.axhline(0.4, color=&quot;orange&quot;, label=&quot;$0.4q(y)$&quot;) normal_rv = norm(5, 1) plt.plot(x, normal_rv.pdf(x), linewidth=2, label=&quot;$p(y)$&quot;) plt.xlim(0, 10) plt.ylim(0, 0.48) plt.legend(); plt.title(&quot;Density functions of $p(y)$, $0.4q(y)$ (unnormalized)&quot;) plt.axvline(3.825, linestyle=&quot;--&quot;, linewidth=2, ymax=0.415) plt.axvline(3.825, color=&quot;orange&quot;, linestyle=&quot;--&quot;, linewidth=2, ymin=0.415, ymax=0.830) plt.axhline(0.2, color=&quot;black&quot;, linestyle=&quot;--&quot;, linewidth=2); . Dashed red lines show our first hypothetical sample from $U(0, 10)$. See the horizontal dashed line and observe that $0.4q(0.3825) = 0.4$ and $p(0.3825)=0.2$. Therefore, we should expect the probability of accepting the value $0.3825$ to be $0.5$: . $$Pr(accept| y = 3.825) approx 0.5$$ . In the next step we need to sample $u sim U(0, 1)$ and accept the sampled $y$ value if . $u leq frac {f(x)} {Mg(x)} approx 0.5$. . We know that $Pr(u leq 0.5) = 0.5$ which means that $Pr(accept| y = 3.825) = 0.5$. This confirms our observation the on the above plot. . What if we can&#39;t find such $M$? The next plot demonstrates a $q(y)$ that can&#39;t be used to sample from $ mathcal{N(5, 1)}$. . In this case, we can&#39;t find a value $M$ such that $Mq(y) geq p(y)$ for all $y$. No matter how large we choose the $M$, $Mq(y)$ will always be $0$ for $4 leq x leq 6$. This means that we will never be able to sample $x$ values between $4$ and $6$. Then the obtained samples will never follow our target distribution $ mathcal{N(5, 1)}$ independent of how we accept or reject the samples. . Obtain samples and compare with numpy random normal . np.random.seed(0) # Obtain 1000 samples from U[0, 10] (q(y)) q_samples = np.random.uniform(0, 10, 100000) # Obtain 1000 samples from U[0, 1] (accept/reject criterion) u_samples = np.random.uniform(0, 10, 100000) # Obtain M. We know that q(x) = 0.1 for all x M = normal_rv.pdf(5) / 0.1 # Accept the samples that satisfies the condition norm_samples = q_samples[M * 0.1 * u_samples &lt;= normal_rv.pdf(q_samples)] . You can see that most of the samples are rejected. This method is very inefficient in this case where the target distribution is normal and the samples are obtained from a uniform distribution. . norm_samples.shape . (2524,) . numpy_samples = np.random.normal(loc=5, scale=1, size=2500) plt.figure(figsize=(10, 6)) plt.hist(norm_samples, alpha=0.5, label=&quot;rejection sampling&quot;) plt.hist(numpy_samples, alpha=0.5, label=&quot;numpy samples&quot;) plt.legend() plt.title(&quot;Samples with rejection method and numpy samples&quot;) . Text(0.5, 1.0, &#39;Samples with rejection method and numpy samples&#39;) .",
            "url": "http://ichy.io/2020/12/07/rejection-sampling.html",
            "relUrl": "/2020/12/07/rejection-sampling.html",
            "date": " • Dec 7, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Probabilistic Computation 1: Inverse transform sampling",
            "content": "Inverse transform sampling is a simple method for sampling from a probability distribution. It is an exact sampling method which means that the samples are drawn independently. This method requires that we can take independent samples from a uniform $U(0, 1)$ distribution. Modern computers are equipped with pseudo random number generators and we will use numpy for sampling from $U(0, 1)$. . Algorithm . Suupose that we want to sample from a probability distribution $p(v)$. Corresponding cumulative distribution functions is defined as: . $F(v_*) = int_{- infty}^{v_*} p(v) dv$ . Then the steps for inverse transform sampling are as follows. . Take a random sample from $U sim U(0, 1)$ | Then let $v = F^{-1}(U)$ | . The values $v$ obtained will follow the distribution $p$. If we have $F^{-1}$ in closed form, inverse sampling method is very useful. However, this not always the case. For example, for normal distribution we don&#39;t have a closed form expression of $F^{-1}$. . The intuition . Assume that we have a triangular probability density function. The pdf and cdf are as follows. Also assume that $Pr(v &gt; 1) = 0$ and $Pr(v &lt; 0)$ = 0 . In the cumulative distribution function plot, each green line shows the change in $F^{-1}(u)$ when $u$ takes a constant small step (0.03). Two consecutive green lines specify a constant fraction of $U(0, 1)$ allocated to the numbers on the $x$ axis. As $u to 1$, the green lines become more densely spaced. Thus, a same fraction of the $U(0, 1)$ is allocated to relatively smaller intervals as $u to 1$. . Observing the red lines, wee see that $0 leq u leq 0.25$ is allocated to the values $v leq 0.5$ and the values $u &gt; 0.25$ are allocated to the values $v &gt; 0.5$. The result is that $Pr(v leq 0.5) = 0.25$ which can be confirmed on the probability density function plot. . If you are interested in the proof, check out Karl Sigman&#39;s lecture notes. . Exponential distribution example . The example is often given with an exponential distribution since calculating $F^{-1}$ is straightforward. . $p(v) = lambda e^{- lambda v}$ . $F(v) = 1 - e^{ lambda v}$ . $F^{-1}(p) = frac{-log(1 - p)}{ lambda}$ . After obtaining $F^{-1}(p)$, we can start to simulate. Let&#39;s define the inverse CDF as: . import numpy as np def inv_cdf(p, lamb): &quot;&quot;&quot;Inverse CDF of exponential distribution&quot;&quot;&quot; return -np.log(1 - p) / lamb . Let&#39;s take 5000 samples from $U(0, 1)$ . np.random.seed(42) # set the seed for reproducibility u = np.random.uniform(0, 1, 5000) . Now we can obtain samples from $p$ using the inverse CDF. Assume that $ lambda=5$. . v = inv_cdf(u, 5) . Comparing the samples with np.random.exponential samples . x = np.random.exponential(1 / 5, 5000) # Using scale = 1 / 5 since scale = 1 / lambda bins = np.linspace(0.0, 1.7, 20) plt.figure(figsize=(8, 6)) plt.hist(x, bins, alpha=0.4, label=&quot;numpy samples&quot;, color=&quot;green&quot;); plt.hist(v, bins, alpha=0.4, label=&quot;our samples&quot;, color=&quot;blue&quot;); plt.title(&quot;Samples obtained from numpy vs samples obtained with inversed transform sampling&quot;); . Normal distribution example . In the normal distribution case, we don&#39;t have a closed form expression of the inverse CDF. However, we can evaluate it on a grid of points and interpolate for any values in between. Let&#39;s evaluate the normal pdf at a grid of points first. In this case, we will deal with a univariate normal distribution. Note that this approach becomes computionally infeasible as the number of dimensions increases. . def pdf_normal(x, mu, sigma): &quot;&quot;&quot;probability density function for normal distribution&quot;&quot;&quot; return np.exp(-(x - mu)**2 / (2 * sigma**2)) / sigma / np.sqrt(2 * np.pi) pdf_normal(0, 0, 1) . 0.3989422804014327 . We can now evaluate the integral to find the CDF. Let&#39;s use cumtrapz for cumulative integration. After calculating the CDF at a grid of points, inverse of the CDF is obtained by swapping the x and y axes. . from scipy.integrate import cumtrapz cdf = cumtrapz(discrete_pdf, grid) . To use the samples taken from $U(0, 1)$ in the discrete CDF, interpolation is required. . from scipy.interpolate import interp1d inverse_cdf_normal = interp1d(cdf, grid[1:]) inverse_cdf_normal(0.9) . array(1.28155335) . Let the sampling begin! As usual, we should check the histogram and expect that it matches numpy samples. . plt.figure(figsize=(8, 4)) normal_samples = inverse_cdf_normal(u) numpy_samples = np.random.normal(0, 1, 5000) plt.hist(normal_samples, label=&quot;inverse transform samples&quot;); plt.hist(numpy_samples, label=&quot;np.random.normal samples&quot;); plt.legend(); . Takeaways . Exact sampling means that the samples are drawn independently. | If we have the closed form expression of the inverse CDF, inverse transform sampling is very efficient since there is no accept/reject mechanism (all samples are accepted). Otherwise it becomes very inefficient as the number of dimensions increases. | .",
            "url": "http://ichy.io/2020/05/24/inverse-transform.html",
            "relUrl": "/2020/05/24/inverse-transform.html",
            "date": " • May 24, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "http://ichy.io/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "http://ichy.io/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "http://ichy.io/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}